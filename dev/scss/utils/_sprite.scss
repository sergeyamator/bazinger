/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$android-hover-name: 'android-hover';
$android-hover-x: 0px;
$android-hover-y: 0px;
$android-hover-offset-x: 0px;
$android-hover-offset-y: 0px;
$android-hover-width: 54px;
$android-hover-height: 53px;
$android-hover-total-width: 90px;
$android-hover-total-height: 302px;
$android-hover-image: '/assets/img/sprite.png';
$android-hover: (0px, 0px, 0px, 0px, 54px, 53px, 90px, 302px, '/assets/img/sprite.png', 'android-hover', );
$android-name: 'android';
$android-x: 0px;
$android-y: 53px;
$android-offset-x: 0px;
$android-offset-y: -53px;
$android-width: 54px;
$android-height: 53px;
$android-total-width: 90px;
$android-total-height: 302px;
$android-image: '/assets/img/sprite.png';
$android: (0px, 53px, 0px, -53px, 54px, 53px, 90px, 302px, '/assets/img/sprite.png', 'android', );
$apple-hover-name: 'apple-hover';
$apple-hover-x: 0px;
$apple-hover-y: 106px;
$apple-hover-offset-x: 0px;
$apple-hover-offset-y: -106px;
$apple-hover-width: 53px;
$apple-hover-height: 53px;
$apple-hover-total-width: 90px;
$apple-hover-total-height: 302px;
$apple-hover-image: '/assets/img/sprite.png';
$apple-hover: (0px, 106px, 0px, -106px, 53px, 53px, 90px, 302px, '/assets/img/sprite.png', 'apple-hover', );
$apple-name: 'apple';
$apple-x: 0px;
$apple-y: 159px;
$apple-offset-x: 0px;
$apple-offset-y: -159px;
$apple-width: 53px;
$apple-height: 53px;
$apple-total-width: 90px;
$apple-total-height: 302px;
$apple-image: '/assets/img/sprite.png';
$apple: (0px, 159px, 0px, -159px, 53px, 53px, 90px, 302px, '/assets/img/sprite.png', 'apple', );
$men-name: 'men';
$men-x: 0px;
$men-y: 212px;
$men-offset-x: 0px;
$men-offset-y: -212px;
$men-width: 90px;
$men-height: 90px;
$men-total-width: 90px;
$men-total-height: 302px;
$men-image: '/assets/img/sprite.png';
$men: (0px, 212px, 0px, -212px, 90px, 90px, 90px, 302px, '/assets/img/sprite.png', 'men', );
$spritesheet-width: 90px;
$spritesheet-height: 302px;
$spritesheet-image: '/assets/img/sprite.png';
$spritesheet-sprites: ($android-hover, $android, $apple-hover, $apple, $men, );
$spritesheet: (90px, 302px, '/assets/img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
